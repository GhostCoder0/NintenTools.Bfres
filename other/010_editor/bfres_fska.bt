// ==== Structures =====================================================================================================

typedef struct // SkeletalAnim
{
	char signature[4]; // FSKA
	NameOffset ofsName;
	NameOffset ofsPath;
	enum <uint> SkeletalAnimFlags
	{
		SAF_None,
		SAF_CurveBaked = 1 << 0,
		SAF_IsLooping = 1 << 2
	} flg : 8;
	enum <uint> SkeletalAnimScaling
	{
		SAS_None,
		SAS_Standard,
		SAS_Maya,
		SAS_Softimage
	} flgScaling : 4;
	enum <uint> SkeletalAnimRotation
	{
		SAR_Quaternion,
		SAR_EulerXYZ
	} flgRotation : 1;
	if (file.version >= 0x03040000)
	{
		uint numFrame;
		ushort numBoneAnim;
		ushort numUserData;
	}
	else
	{
		ushort numFrame;
		ushort numBoneAnim;
		ushort numUserData;
		ushort padding <fgcolor=0x808080, hidden=true>;
	}
	uint numCurve;
	uint sizBaked;
	Offset ofsBoneAnimList;
	Offset ofsSkeleton; // Points to FSKL
	Offset ofsBindIndexList;
	Offset ofsUserDataDict;
	// Read bone animations.
	FSeek(ofsBoneAnimList.target);
	BoneAnim boneAnims[numBoneAnim] <optimize=false>;
	// Read bind indices.
	FSeek(ofsBindIndexList.target);
	ushort bindIndices[numBoneAnim] <bgcolor=0xD9AEAE, optimize=true>;
	FAlign(4);
	// Read user data.
	if (ofsUserDataDict.value)
	{
		FSeek(ofsUserDataDict.target);
		Dict userData(DT_USER_DATA);
	}
} SkeletalAnim <bgcolor=0xFFCDCD, read=SkeletalAnimRead>;

typedef struct // BoneAnim
{
	enum <uint> BoneAnimBase
	{
		BAB_Scale = 1 << 3,
		BAB_Rotate = 1 << 4,
		BAB_Translate = 1 << 5,
	} flgBase : 6;
	enum <uint> BoneAnimCurve
	{
		BAC_ScaleX = 1 << 0,
		BAC_ScaleY = 1 << 1,
		BAC_ScaleZ = 1 << 2,
		BAC_RotateX = 1 << 3,
		BAC_RotateY = 1 << 4,
		BAC_RotateZ = 1 << 5,
		BAC_RotateW = 1 << 6,
		BAC_TranslateX = 1 << 7,
		BAC_TranslateY = 1 << 8,
		BAC_TranslateZ = 1 << 9
	} flgCurve : 17;
	enum <uint> BoneAnimTransform
	{
		BAT_None,
		BAT_SegmentScaleCompensate = 1 << 0,
		BAT_ScaleUniform = 1 << 1,
		BAT_ScaleVolumeOne = 1 << 2,
		BAT_RotateZero = 1 << 3,
		BAT_TranslateZero = 1 << 4,
		BAT_ScaleOne = BAT_ScaleVolumeOne | BAT_ScaleUniform,
		BAT_RotateTranslateZero = BAT_RotateZero | BAT_TranslateZero,
		BAT_Identity = BAT_ScaleOne | BAT_RotateZero | BAT_TranslateZero
	} flgTransform : 5;
	NameOffset ofsName;
	ubyte beginRotate;
	ubyte beginTranslate;
	ubyte numAnimCurve;
	ubyte beginBaseTranslate;
	byte beginCurve; // Int32 normally.
	byte padding[3] <fgcolor=0x808080, hidden=true>;
	Offset ofsAnimCurveList;
	Offset ofsBaseValue;
	local uint pos <hidden=true> = FTell();
	// Read animation curves.
	if (numAnimCurve)
	{
		FSeek(ofsAnimCurveList.target);
		AnimCurve animCurves[numAnimCurve] <optimize=false>;
	}
	// Read base transformation values.
	FSeek(ofsBaseValue.target);
	if (flgBase & BAB_Scale) Vector3F baseScale;
	if (flgBase & BAB_Rotate) Vector4F baseRotation;
	if (flgBase & BAB_Translate) Vector3F baseTranslation;
	FSeek(pos); // Seek back to header end.	
} BoneAnim <bgcolor=0xEBBDBD, read=BoneAnimRead>;

// ==== Template Methods ===============================================================================================

string SkeletalAnimRead(SkeletalAnim &skeletalAnim)
{
	return skeletalAnim.ofsName.name;
}

string BoneAnimRead(BoneAnim &boneAnim)
{
	return boneAnim.ofsName.name;
}
